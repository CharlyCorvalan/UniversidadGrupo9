/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package universidadgrupo9.Vistas;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import universidadgrupo9.AccesoADatos.AlumnoData;
import universidadgrupo9.AccesoADatos.Conexion;
import universidadgrupo9.AccesoADatos.MateriaData;
import universidadgrupo9.Entidades.Alumnos;
import universidadgrupo9.Entidades.Materia;

/**
 *
 * @author charl
 */
public class FormularioDeAlumno extends javax.swing.JInternalFrame {
//Instanciamos un modelo de tabla a usar
    private DefaultTableModel modelo = new DefaultTableModel() {
    //A travez del metodo isCellEditable se elije las filas y columnas que seran editables
    //o no.
        public boolean isCellEditable(int fila, int columna) {

            return false;
        }
    };
//Inicializamos los componentes del JIFrame 
    public FormularioDeAlumno() {
        initComponents();
        cargarCabecera();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Agregar = new javax.swing.JButton();
        BEliminar = new javax.swing.JButton();
        BGuardar = new javax.swing.JButton();
        BSalir = new javax.swing.JButton();
        TextoDni = new javax.swing.JTextField();
        TextoApellido = new javax.swing.JTextField();
        TextoNombre = new javax.swing.JTextField();
        BBuscar = new javax.swing.JButton();
        Radio = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaAlumnos = new javax.swing.JTable();
        FechaNacimiento = new com.toedter.calendar.JDateChooser();

        jLabel1.setText("Alumno");

        jLabel2.setText("Documento");

        jLabel3.setText("Apellido");

        jLabel4.setText("Nombre");

        jLabel5.setText("Estado");

        jLabel6.setText("Fecha de Nacimiento");

        Agregar.setText("Agregar");
        Agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarActionPerformed(evt);
            }
        });

        BEliminar.setText("Eliminar");
        BEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BEliminarActionPerformed(evt);
            }
        });

        BGuardar.setText("Guardar");
        BGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGuardarActionPerformed(evt);
            }
        });

        BSalir.setText("Salir");
        BSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSalirActionPerformed(evt);
            }
        });

        TextoDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextoDniKeyTyped(evt);
            }
        });

        TextoApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextoApellidoActionPerformed(evt);
            }
        });

        TextoNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextoNombreActionPerformed(evt);
            }
        });

        BBuscar.setText("Buscar");
        BBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBuscarActionPerformed(evt);
            }
        });

        TablaAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TablaAlumnos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(161, 161, 161)
                                                .addComponent(Radio))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(80, 80, 80)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(TextoApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(TextoDni, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(TextoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(BBuscar))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(56, 56, 56)
                                        .addComponent(FechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(136, 136, 136)
                                        .addComponent(jLabel1)))
                                .addGap(0, 72, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(Agregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BEliminar)
                        .addGap(34, 34, 34)
                        .addComponent(BGuardar)
                        .addGap(39, 39, 39)
                        .addComponent(BSalir)
                        .addGap(37, 37, 37))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextoDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(BBuscar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(TextoApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(TextoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addComponent(jLabel5)
                        .addGap(6, 6, 6))
                    .addComponent(Radio))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(FechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Agregar)
                    .addComponent(BEliminar)
                    .addComponent(BGuardar)
                    .addComponent(BSalir))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextoApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextoApellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextoApellidoActionPerformed

    private void TextoNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextoNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextoNombreActionPerformed

    private void BSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSalirActionPerformed
         //Se utiliza el siguiente codigo para cerrar la ventana
        dispose();

    }//GEN-LAST:event_BSalirActionPerformed

    private void BGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGuardarActionPerformed
        //Este metodo permitira modificar o no, a un alumno ya existente
        
        //Se recibe informacion de los textfield
        String apellido = TextoApellido.getText();
        String nombre = TextoNombre.getText();
        String documento=TextoDni.getText();
        //Se verifica que los campos de textfield no esten vacios
        if (apellido.equals("")|| nombre.equals("")) {
            //Mensaje que advierte que faltan datos
            JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios");
        //Se comprueba que lo ingresado en campos Apellido y Nombre sean solo letras
        //a travez del metodo matches
        }else if(apellido.matches("^[a-zA-Z]*$")&&nombre.matches("^[a-zA-Z]*$")){
            try {
                //Se parcea a Integer el dato obtenido en el textfield Dni
                int dni=Integer.parseInt(documento);
                //Se obtiene la seleccion del radiobuton que determina el estado del alumno
                boolean estado = Radio.isSelected();
                //Se obtiene la fecha seleccionada en el calendario y se la parcea al tipo LocalDate
                LocalDate feNac;
                feNac = FechaNacimiento.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                //Se instancia un objeto AlumnoData para acceder a sus metodos
                AlumnoData guardar = new AlumnoData();
                //Se instancia un objeto del tipo Alumnos que contendra la informacion obtenida
                Alumnos alumno = new Alumnos(Integer.parseInt(modelo.getValueAt(0, 0).toString()), dni, apellido, nombre, feNac, estado);
                //Se invoca al modificarAlumno de AlumnoData el cual recibe un alumno
                guardar.modificarAlumno(alumno);
                //Completado con exito se setea los textfield, radiobutton y calendario 
                limpiarTabla();
                FechaNacimiento.setDate(null);
                TextoDni.setText("");
                TextoApellido.setText("");
                TextoNombre.setText("");
                Radio.setSelected(false);
                //Muestra en tabla al alumno recien modificado
                cargarTabla(alumno);
                //Evita que el programa salga abruptamente si el campo de id(int), no recibe un entero
            } catch (NumberFormatException ex) {
                
                JOptionPane.showMessageDialog(null, "Campo de DNI solo recibe numeros enteros");
            }
            }else{
            //Envia un mensaje de alerta si en los campos apellido o nombre se ingresa un caracter diferente a una letra
                JOptionPane.showMessageDialog(null, "Campos apellido y nombre requiere solo caracteres");
            }

    }//GEN-LAST:event_BGuardarActionPerformed

    private void BBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBuscarActionPerformed
        //La accion primero borra la tabla y luego ejecuta el resto de codigo
        limpiarTabla();
        String documento = TextoDni.getText();
        Alumnos alu = new Alumnos();
        if (documento.equals("")) {
            JOptionPane.showMessageDialog(null, "Campo documento requerido esta vacio");
        } else {
            try {
                int dni = Integer.parseInt(documento);             
                AlumnoData buscarDNI = new AlumnoData();
                alu = buscarDNI.buscarPorDni(dni);
                //Verificacion si el dato ingresado en el campo dni esta presente en la base de datos
                if (alu.getIdAlumno() == 0) {
                    JOptionPane.showMessageDialog(null, "DNI no encontrado, intente nuevamente");
                } else {
                    //Ademas de cargar la tabla, la informacion se muestra en los textfield, radiobutton y calendario
                    cargarTabla(alu);
                    Date fecha = new Date();
                    LocalDate fe;
                    fe = alu.getFechaNac();
                    fecha = Date.from(fe.atStartOfDay(ZoneId.systemDefault()).toInstant());
                    FechaNacimiento.setDate(fecha);
                    TextoApellido.setText(alu.getApellido());
                    TextoNombre.setText(alu.getNombre());
                    Radio.setSelected(alu.isActivo());

                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El valor ingresado no es un número válido");
            }

        }
    }//GEN-LAST:event_BBuscarActionPerformed

    private void BEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BEliminarActionPerformed
        //El metodo eliminar requiere que se seleccione una fila de la tabla, luego de haber buscado un alumno por sui dni
        //GetSelectedRow devuelve un numero entero que representa la fila seleccionada
        int filaS = TablaAlumnos.getSelectedRow();
        //Comprobacion del valor de la variable que contiene el numero de fila seleccionada
        //El valor mas bajo posible al seleccionar una fila es 0 (cero)
        if (filaS != -1) {
            try {
                int id = Integer.parseInt(modelo.getValueAt(filaS, 0).toString());               
                AlumnoData eliminar = new AlumnoData();
                eliminar.eliminarAlumno(id);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El valor en la primera columna no es un número válido");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un alumno / Busque por DNI");
            //Si se presiona el boton eliminar si haber seleccionado una fila, se devuelve un cartel y se setea 
            //los textfields a vacio, radiobutton a false y calendario a null
            TextoDni.setText("");
            TextoApellido.setText("");
            TextoNombre.setText("");
            Radio.setSelected(false);
            FechaNacimiento.setDate(null);
        }
        limpiarTabla();

    }//GEN-LAST:event_BEliminarActionPerformed

    private void TextoDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextoDniKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TextoDniKeyTyped

    private void AgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarActionPerformed

        String dni = TextoDni.getText();
        String apellido = TextoApellido.getText();
        String nombre = TextoNombre.getText();
        //Accion Agregar, requiere toda la informacion de un alumno para ser agregado, excepto el id que 
        //se genera automaticamente en la base de datos
        if (dni.equals("") || apellido.equals("") || nombre.equals("") || Radio.isSelected() == false) {
            JOptionPane.showMessageDialog(null, "Datos incompletos");
        //Si algun dato esta vacio se setea todo a su forma original
            TextoDni.setText("");
            TextoApellido.setText("");
            TextoNombre.setText("");
            FechaNacimiento.setDate(null);
        } else if (apellido.matches("^[a-zA-Z ]*$") && nombre.matches("^[a-zA-Z ]*$")) {
            try {
                int doc = Integer.parseInt(dni);
                AlumnoData guardar = new AlumnoData();
                Alumnos alu = new Alumnos();
                alu = guardar.buscarPorDni(doc);
                if (alu.getDni() != 0) {
                    JOptionPane.showMessageDialog(null, "Ya existe un alumno con ese DNI/ Intente de nuevo");
                } else {
                    LocalDate fecha;
                    fecha = FechaNacimiento.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                    Conexion.getConexion();

                    Alumnos modificar = new Alumnos(doc, apellido, nombre, fecha, Radio.isSelected());
                    guardar.guardarAlumno(modificar);
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "el documento requiere enteros" + ex);
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar una fecha de nacimiento");
            } finally {
                TextoDni.setText("");
                TextoApellido.setText("");
                TextoNombre.setText("");
                Radio.setSelected(false);
                FechaNacimiento.setDate(null);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Campos Apellido y Nombre debe contener caracteres");
            TextoDni.setText("");
            TextoApellido.setText("");
            TextoNombre.setText("");
            Radio.setSelected(false);
            FechaNacimiento.setDate(null);
        }
    }//GEN-LAST:event_AgregarActionPerformed

    private void FechaNacimientoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_FechaNacimientoPropertyChange
        if (FechaNacimiento.getDate() != null) {
            LocalDate fecha = FechaNacimiento.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        }
    }//GEN-LAST:event_FechaNacimientoPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Agregar;
    private javax.swing.JButton BBuscar;
    private javax.swing.JButton BEliminar;
    private javax.swing.JButton BGuardar;
    private javax.swing.JButton BSalir;
    private com.toedter.calendar.JDateChooser FechaNacimiento;
    private javax.swing.JCheckBox Radio;
    private javax.swing.JTable TablaAlumnos;
    private javax.swing.JTextField TextoApellido;
    private javax.swing.JTextField TextoDni;
    private javax.swing.JTextField TextoNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
//Metodo usado para darle forma a la cabecera de la tabla
    private void cargarCabecera() {
        modelo.addColumn("idAlumno");
        modelo.addColumn("DNI");
        modelo.addColumn("Apellido");
        modelo.addColumn("Nombre");
        modelo.addColumn("F. Nacimiento");
        modelo.addColumn("Estado");
        TablaAlumnos.setModel(modelo);
    }
    //Permite cargar la tabla con los datos necesarios
    private void cargarTabla(Alumnos alumno) {
        modelo.addRow(new Object[]{alumno.getIdAlumno(), alumno.getDni(), alumno.getApellido(), alumno.getNombre(), alumno.getFechaNac(), alumno.isActivo()});
    }
    //Remueve toda la informacion de la tabla
    private void limpiarTabla() {
        int filas = modelo.getRowCount();
        for (int i = filas - 1; i > -1; i--) {
            modelo.removeRow(i);
        }
    }
}
